/* program for testing the new GLT ACU interface */
/* N. A. Patel, March 2014 */
/* copy of acuStatus.c- for twoLine status. NAP 18 Mar 2023 */
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h>

#include "acuData.h"
#include "acuCommands.h"
 
int main(void)
{
  int sockfd = 0,n = 0;
  char recvBuff[256];
  char sendBuff[256];
  int hh,mm;
  double hours,minutes,seconds;
  struct sockaddr_in serv_addr;
  twoLineTrackstatus twoLineResp;
  acuCmd acuCommand;
  char line0[24];
  char line1[69];
  char line2[69];

  acuCommand.stx = 0x2;
  acuCommand.id = 0x31; /* two line status, code '1', hex 0x31, see 4.1.4.1 of ICD */
  acuCommand.datalength = 0x7;
  acuCommand.checksum = 0x38;
  acuCommand.etx = 0x3;


  memset(recvBuff, '0' ,sizeof(recvBuff));
  memset(sendBuff, '0' ,sizeof(sendBuff));
  memset(line0, '0' ,sizeof(line0));
  memset(line1, '0' ,sizeof(line1));
  memset(line2, '0' ,sizeof(line2));

  if((sockfd = socket(AF_INET, SOCK_STREAM, 0))< 0) {
      printf("\n Error : Could not create socket \n");
      return 1;
    }
 
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(9010);
  serv_addr.sin_addr.s_addr = inet_addr("192.168.1.103");
 
  if(connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr))<0) {
      printf("\n Error : Connect Failed \n");
      return 1;
    }

  memcpy(sendBuff,(char*)&acuCommand,sizeof(acuCommand));
  n = send(sockfd,sendBuff,sizeof(acuCommand),0);
  if (n<0) printf("ERROR writing to ACU.");
  printf("Wrote %d bytes to ACU\n",n);
 
  /* receive the ACK response from ACU */
  n = recv(sockfd, recvBuff, sizeof(twoLineResp),0); 

  if( n < 0)  printf("\n Read Error \n"); 


  printf("Received:  0x%x 0x%x from ACU\n",recvBuff[0],recvBuff[1]);


  /* check if ACK is received, then receive the response and parse it */
  if (recvBuff[0]==0x6) {

  n = recv(sockfd, (char *)&twoLineResp, sizeof(twoLineResp),0);

  printf("Read %d bytes from ACU\n",n);

  printf ("Received %d bytes from ACU.\n",twoLineResp.datalength);
  strncpy(line0,twoLineResp.currentTLEline0,24);
  strncpy(line1,twoLineResp.currentTLEline1,69);
  strncpy(line2,twoLineResp.currentTLEline2,69);
  printf("Line 1: %c%c%c%c%c%c\n",
   twoLineResp.currentTLEline1[0],
   twoLineResp.currentTLEline1[1],
   twoLineResp.currentTLEline1[2],
   twoLineResp.currentTLEline1[3],
   twoLineResp.currentTLEline1[4],
   twoLineResp.currentTLEline1[5]);
  printf("Line 0: %s\n",line0);
  printf("Line 1: %s\n",line1);
  printf("Line 2: %s\n",line2);
  printf("Next Sample Time: %d\n",twoLineResp.nextSampleTimeOfDay);
  hours = (double)twoLineResp.nextSampleTimeOfDay/3600000.;
  hh = (int)hours;
  minutes = (hours-hh)*60.; 
  mm = (int) minutes;
  seconds = (minutes-mm)*60.;
  printf ("Time: (day, hh:mm:ss.sss):  %d %02d:%02d:%02.3f\n",twoLineResp.nextSampleDayOfYear,hh,mm,seconds);

  printf ("Azimuth (deg): %f \n",(double)twoLineResp.nextSampleAzimuth/1.0e6);
  printf ("Elevation (deg): %f \n",(double)twoLineResp.nextSampleElevation/1.0e6);

  printf("LOS Time: %d\n",twoLineResp.LOStimeOfDay);
  hours = (double)twoLineResp.LOStimeOfDay/3600000.;
  hh = (int)hours;
  minutes = (hours-hh)*60.; 
  mm = (int) minutes;
  seconds = (minutes-mm)*60.;
  printf ("Time: (day, hh:mm:ss.sss):  %d %02d:%02d:%02.3f\n",twoLineResp.LOSdayOfYear,hh,mm,seconds);

  printf ("LOS Azimuth (deg): %f \n",(double)twoLineResp.LOSazimuth/1.0e6);
  printf ("LOS Elevation (deg): %f \n",(double)twoLineResp.LOSelevation/1.0e6);
  }


  if (recvBuff[0]==0x2) {
  printf("ACU refuses the command...reason:");
  if (recvBuff[1]==0x43) printf("Checksum error.\n");
  if (recvBuff[1]==0x45) printf("ETX not received at expected position.\n");
  if (recvBuff[1]==0x49) printf("Unknown identifier.\n");
  if (recvBuff[1]==0x4C) printf("Wrong length (incorrect no. of bytes rcvd.\n");
  if (recvBuff[1]==0x6C) printf("Specified length does not match identifier.\n");
  if (recvBuff[1]==0x4D) printf("Command ignored in present operating mode.\n");
  if (recvBuff[1]==0x6F) printf("Other reasons.\n");
  if (recvBuff[1]==0x52) printf("Device not in Remote mode.\n");
  if (recvBuff[1]==0x72) printf("Value out of range.\n");
  if (recvBuff[1]==0x53) printf("Missing STX.\n");
  }

  close(sockfd);
 
  return 0;
}
